# -*- coding:utf-8 -*-# @Time : 2020/9/26  下午# @Author: zeng.liimport osimport timeimport unittestfrom appium import webdriverfrom common.config import deviceVersion, deviceNamefrom common.logger import  Loggerlog = Logger()class Action(unittest.TestCase):    wd = None    @classmethod    def setUpClass(cls):        try:            """连接设备"""            desired_caps = {'platformName': 'Android',                            'deviceName': deviceName,                            'platformVersion': deviceVersion,                            'appPackage': 'com.yqxue.yqxue',                            'appActivity': 'com.yqxue.yqxue.splash.SplashActivity',                            # 'unicodeKeyboard': "True",  # 使用unicode输入法                            'resetKeyboard': "True",  # 重置输入法到初始状态                            'noReset': "True",  # 启动app时不要清除app里的原有的数据                            "automationName":'Appium'            }            cls.wd = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps)            log.info('设备连接成功，开始执行测试用例')            cls.wd.implicitly_wait(8)        except Exception as e:            log.error("设备连接异常:", e)    @classmethod    def terDownClass(cls):        cls.wd.quit()        log.info('用例执行完成，设备断开连接')    def setUp(self) -> None:        """进入直播操作"""        try:            time.sleep(10)            log.info("进入直播间成功")        except Exception as e:            log.error("进入直播间异常"% e)    def tearDown(self) -> None:        """"退出直播间"""        try:            log.info("退出直播间成功")        except Exception as e:            log.error("退出直播间异常"% e)    #     # 保存截图并保存到报告    # def saveScreenShot(self, filename):    #     cur_path = os.path.dirname(os.path.realpath(__file__))    #     image_path = os.path.join(cur_path, 'image')    #     if not os.path.exists(image_path):    #         os.mkdir(image_path)    #     list_value = []    #     list = filename.split('.')    #     for value in list:    #         list_value.append(value)    #     if list_value[1] == "png" or list_value[1] == "PNG" or list_value[1] == "jpg" or list_value[1] == "JPG":    #         if "fail" in list_value[0].split("_"):    #             try:    #                 self.driver.save_screenshot(os.path.join(image_path, filename))    #                 img = self.img2base(image_path, filename)    #             except Exception:    #                 log.logger.exception("未能保存失败截图", exc_info=True)    #             else:    #                 log.logger.info(    #                     '成功保存失败截图 [%s]' % filename)    #         elif "pass" in list_value[0].split("_"):    #             try:    #                 self.driver.save_screenshot(os.path.join(image_path, filename))    #             except Exception:    #                 log.logger.exception("未能保存通过截图", exc_info=True)    #             else:    #                 log.logger.info(    #                     '成功保存通过截图 [%s]' % filename)    #         else:    #             # 格式不包含fail/pass    #             log.logger.info('[%s]截图保存失败，格式名不包含fail/pass' % filename)    #     else:    #         # 非png/jpg格式    #         log.logger.info(    #             '[%s]截图保存失败，非png/jpg格式' % filename)    # @property    # def getImage(self, imageName='images'):    #     '''    #     截取图片,并保存在images文件夹    #     :return: 无    #     '''    #     timestrmap = time.strftime('%Y%m%d_%H.%M.%S')    #     cur_path = os.path.dirname(os.path.realpath(__file__))    #     image_path = os.path.join(cur_path, imageName)    #     if not os.path.exists(image_path):    #         os.mkdir(image_path)    #     imgPath = os.path.join(image_path, timestrmap + '.png')    #    #     self.driver.save_screenshot(imgPath)    #     # print('screenshot:', timestrmap + '.png')    #    # def get_windows_img(self, imageName='images'):    #     self.logger = logging.getLogger(__name__)    #     cur_path = os.path.dirname(os.path.realpath(__file__))    #     image_path = os.path.join(cur_path, imageName)    #     if not os.path.exists(image_path):    #         os.mkdir(image_path)    #     # file_path = 'D:/python/pom_adv/report/screenshots/'    #     rq = time.strftime('%Y%m%d%H%M%S', time.localtime(time.time()))    #     screen_name = image_path + rq + '.png'    #     print(screen_name)    #     try:    #         self.driver.get_screenshot_as_file(screen_name)    #         self.logger.info("Had take screenshot and save to folder : /screenshots")    #     except NameError as e:    #         self.logger.error("Failed to take screenshot! %s" % e)    #         self.get_windows_img()    @property    def getImage(self):        '''        截取图片,并保存在images文件夹        :return: 无        '''        timestrmap = time.strftime('%Y%m%d_%H.%M.%S')        cur_path = os.path.dirname(os.path.realpath(__file__))        img_path = os.path.join(os.path.dirname(cur_path), 'imgs')        if not os.path.exists(img_path):            os.mkdir(img_path)        # filename = os.path.join(img_path, timestrmap + '.png')        self.driver.save_screenshot(img_path)        print('screenshot:', timestrmap, '.png')